{"version":3,"sources":["utils/formFields/formFields.tsx","api/appApi.ts","utils/sorting/sortFunction/sortFunction.ts","reducers/tableReducer.ts","utils/sorting/sortArrow/sortArrow.component.tsx","components/table/tableRow/tableRow.component.tsx","utils/pagination/pagination.component.tsx","utils/search/search.component.tsx","utils/formValidation/formValidation.ts","components/addUser/addUser.component.tsx","components/table/table.component.tsx","utils/search/searchFunction/searchFunction.ts","utils/pagination/paginationFilter/paginationFilter.ts","components/userDetails/userDetails.component.tsx","utils/loading/loadDataFromServer/loadingFromServer.component.tsx","utils/error/error.component.tsx","app/App.tsx","store/store.ts","index.tsx"],"names":["Element","instance","axios","create","baseURL","appApi","rowsNumber","get","then","res","data","sortFunction","sortType","sortState","state","sortBy","dataArray","sort","a","b","localeCompare","reverse","initialState","totalItems","currentPage","itemsOnPage","pagesInPortion","idSort","nameSort","lastNameSort","emailSort","phoneSort","searchParam","userDetailsId","loadingData","error","loadingDataAC","payload","type","errorAC","getDataTC","dispatch","response","console","log","message","setTimeout","SortArrowComponent","props","onSortClick","useState","sortArrow","setSortArrow","sortArrowToggleClass","className","onClick","prev","TableRowComponent","id","email","firstName","lastName","phone","tableRowType","showUserDetails","rowTypeClass","onSortClickHandler","field","PaginationComponent","onPageChange","totalPages","Math","ceil","totalPortions","pages","i","push","portionNumber","setPortionNumber","firstPageInPortion","lastPageInPortion","pagesMap","filter","f","map","m","key","lastPage","page","length","portionWithLastPage","firstPage","portionWithFirstPage","Input","input","meta","touched","SearchComponent","onSearch","SearchReduxForm","onSubmit","formData","text","reduxForm","form","handleSubmit","Field","component","name","placeholder","fieldRequired","value","AddUserComponent","onClose","addUser","AddUserReduxForm","invalid","validate","disabled","TableComponent","useDispatch","tableState","useSelector","tableReducer","tableHeader","userDetailsAC","arrItems","item","toLowerCase","indexOf","toLocaleLowerCase","searchFunction","person","v1","currPage","setCurrPage","first","setFirst","addUserPopUp","setAddUserPopUp","getUsers","usersNumber","useEffect","pageNumber","elsOnPage","dataArr","maxEl","minEl","idx","paginationFilter","searchAC","changePageAC","addUserAC","UserDetailsComponent","userDetails","description","address","streetAddress","city","zip","LoadingFromServerComponent","theme","createMuiTheme","palette","secondary","main","ThemeProvider","LinearProgress","color","ErrorComponent","App","reducers","combineReducers","ReduxForm","action","stateForSortById","stateForSortByName","stateForSortByLName","stateForSortByEmail","stateForSortByPhone","Number","parseInt","Date","getTime","toString","slice","newUser","store","createStore","applyMiddleware","ThunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f2cd4ba.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './formField.styles.scss';\r\n\r\nconst FormField = (Element: string) => ({input, meta, ...props}: any) => {\r\n\r\n    const error = meta.touched && meta.error;\r\n\r\n    return (\r\n        <>\r\n            <Element {...input} {...props}/>\r\n            {\r\n                error &&\r\n                <div className={'formFieldError'}>{meta.error}</div>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport const Input = FormField('input');\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://www.filltext.com/',\r\n});\r\n\r\nexport interface ServerResponseObjectType extends Record<string, any> {\r\n    id: number,\r\n    firstName: string,\r\n    lastName: string,\r\n    email: string,\r\n    phone: string,\r\n    address: {\r\n        streetAddress: string,\r\n        city: string,\r\n        state: string,\r\n        zip: string\r\n    },\r\n    description: string,\r\n}\r\n\r\nexport const appApi = {\r\n    getData(rowsNumber: number) {\r\n        return instance\r\n            .get<Array<ServerResponseObjectType>>(`?rows=${rowsNumber}&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    }\r\n}","import {TableStateType} from \"../../../reducers/tableReducer\";\r\n\r\nexport const sortFunction = (sortType: string, sortState: string, state: TableStateType, sortBy: string) => {\r\n    if (sortState === 'desc') {\r\n        if (sortType === 'idSort') {\r\n            state.dataArray.sort((a, b) => a[sortBy] - b[sortBy]);\r\n        } else {\r\n            state.dataArray.sort((a, b) => a[sortBy].localeCompare(b[sortBy]));\r\n        }\r\n        state[sortType] = 'asc';\r\n    } else if (sortState === 'asc') {\r\n        if (sortType === 'idSort') {\r\n            state.dataArray.sort((a, b) => a[sortBy] - b[sortBy]).reverse();\r\n        } else {\r\n            state.dataArray.sort((a, b) => a[sortBy].localeCompare(b[sortBy])).reverse();\r\n        }\r\n        state[sortType] = 'desc';\r\n    }\r\n};","import {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {appApi, ServerResponseObjectType} from \"../api/appApi\";\r\nimport {AppRootStateType} from \"../store/store\";\r\nimport {sortFunction} from \"../utils/sorting/sortFunction/sortFunction\";\r\nimport {AddUserFormDataType} from \"../components/addUser/addUser.component\";\r\n\r\n// action types\r\nconst GET_DATA = 'GET_DATA';\r\nconst CHANGE_PAGE = 'CHANGE_PAGE';\r\nconst SORT_BY_ID = 'SORT_BY_ID';\r\nconst SORT_BY_NAME = 'SORT_BY_NAME';\r\nconst SORT_BY_LNAME = 'SORT_BY_LNAME';\r\nconst SORT_BY_EMAIL = 'SORT_BY_EMAIL';\r\nconst SORT_BY_PHONE = 'SORT_BY_PHONE';\r\nconst SEARCH = 'SEARCH';\r\nconst USER_DETAILS = 'USER_DETAILS';\r\nconst ADD_USER = 'ADD_USER';\r\nconst LOADING_DATA = 'LOADING_DATA';\r\nconst ERROR = 'ERROR';\r\n\r\n// types\r\ntype SortType = 'desc' | 'asc';\r\nexport interface TableStateType extends Record<string, any> {\r\n    dataArray: Array<ServerResponseObjectType>\r\n    totalItems: number\r\n    currentPage: number\r\n    itemsOnPage: number\r\n    pagesInPortion: number\r\n    idSort: SortType\r\n    nameSort: SortType\r\n    lastNameSort: SortType\r\n    emailSort: SortType\r\n    phoneSort: SortType\r\n    searchParam: string\r\n    userDetailsId: number | null\r\n    loadingData: boolean\r\n    error: string | null\r\n}\r\n\r\ntype ThunkType = ThunkAction<void, AppRootStateType, {}, ActionTypes>;\r\ntype ActionTypes =\r\n      ReturnType<typeof getDataAC>\r\n    | ReturnType<typeof sortByIdAC>\r\n    | ReturnType<typeof sortByNameAC>\r\n    | ReturnType<typeof sortByLNameAC>\r\n    | ReturnType<typeof sortByEmailAC>\r\n    | ReturnType<typeof sortByPhoneAC>\r\n    | ReturnType<typeof changePageAC>\r\n    | ReturnType<typeof searchAC>\r\n    | ReturnType<typeof userDetailsAC>\r\n    | ReturnType<typeof addUserAC>\r\n    | ReturnType<typeof loadingDataAC>\r\n    | ReturnType<typeof errorAC>;\r\n\r\n// state\r\nconst initialState: TableStateType = {\r\n    dataArray: [],\r\n    totalItems: 0,\r\n    currentPage: 1,\r\n    itemsOnPage: 10,\r\n    pagesInPortion: 5,\r\n    idSort: 'desc',\r\n    nameSort: 'desc',\r\n    lastNameSort: 'desc',\r\n    emailSort: 'desc',\r\n    phoneSort: 'desc',\r\n    searchParam: '',\r\n    userDetailsId: null,\r\n    loadingData: false,\r\n    error: null,\r\n};\r\n\r\n// action creators\r\nconst getDataAC = (payload: Array<ServerResponseObjectType>) => ({type: GET_DATA, payload} as const);\r\nexport const sortByIdAC = () => ({type: SORT_BY_ID} as const);\r\nexport const sortByNameAC = () => ({type: SORT_BY_NAME} as const);\r\nexport const sortByLNameAC = () => ({type: SORT_BY_LNAME} as const);\r\nexport const sortByEmailAC = () => ({type: SORT_BY_EMAIL} as const);\r\nexport const sortByPhoneAC = () => ({type: SORT_BY_PHONE} as const);\r\nexport const changePageAC = (page: number) => ({type: CHANGE_PAGE, page} as const);\r\nexport const searchAC = (text: string) => ({type: SEARCH, text} as const);\r\nexport const userDetailsAC = (id: number) => ({type: USER_DETAILS, id} as const);\r\nexport const addUserAC = (payload: AddUserFormDataType) => ({type: ADD_USER, payload} as const);\r\nexport const loadingDataAC = (payload: boolean) => ({type: LOADING_DATA, payload} as const);\r\nexport const errorAC = (payload: string | null) => ({type: ERROR, payload} as const);\r\n\r\n// reducer\r\nexport const tableReducer = (state: TableStateType = initialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case GET_DATA:\r\n            return {...state, dataArray: action.payload, totalItems: action.payload.length, currentPage: 1,};\r\n        case CHANGE_PAGE:\r\n            return {...state, currentPage: action.page};\r\n        case SEARCH:\r\n            return {...state, searchParam: action.text};\r\n        case SORT_BY_ID:\r\n            const stateForSortById = {...state}\r\n            sortFunction('idSort', stateForSortById.idSort, stateForSortById, 'id');\r\n            return stateForSortById;\r\n        case SORT_BY_NAME:\r\n            const stateForSortByName = {...state}\r\n            sortFunction('nameSort', stateForSortByName.nameSort, stateForSortByName, 'firstName');\r\n            return stateForSortByName;\r\n        case SORT_BY_LNAME:\r\n            const stateForSortByLName = {...state}\r\n            sortFunction('lastNameSort', stateForSortByLName.lastNameSort, stateForSortByLName, 'lastName');\r\n            return stateForSortByLName;\r\n        case SORT_BY_EMAIL:\r\n            const stateForSortByEmail = {...state}\r\n            sortFunction('emailSort', stateForSortByEmail.emailSort, stateForSortByEmail, 'email');\r\n            return stateForSortByEmail;\r\n        case SORT_BY_PHONE:\r\n            const stateForSortByPhone = {...state}\r\n            sortFunction('phoneSort', stateForSortByPhone.phoneSort, stateForSortByPhone, 'phone');\r\n            return stateForSortByPhone;\r\n        case USER_DETAILS:\r\n            return {...state, userDetailsId: action.id};\r\n        case ADD_USER:\r\n            const id = Number.parseInt(new Date().getTime().toString().slice(5));\r\n            const newUser = {...action.payload, id, address: { streetAddress: 'no data', city: 'no data',\r\n                    state: 'no data', zip: 0 }, description: 'no data', }\r\n            return {...state, dataArray: [newUser, ...state.dataArray],totalItems: state.totalItems + 1};\r\n        case LOADING_DATA:\r\n            return {...state, loadingData: action.payload};\r\n        case ERROR:\r\n            return {...state, error: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// thunks\r\nexport const getDataTC = (rowsNumber: number): ThunkType => async (dispatch: ThunkDispatch<AppRootStateType, {}, ActionTypes>) => {\r\n    dispatch(loadingDataAC(true));\r\n    try {\r\n        const response = await appApi.getData(rowsNumber);\r\n        dispatch(getDataAC(response));\r\n        dispatch(loadingDataAC(false));\r\n    } catch (error) {\r\n        dispatch(loadingDataAC(false));\r\n        console.log(error.message);\r\n        dispatch(errorAC('Something went wrong. Check console and network.'));\r\n        setTimeout(() => {\r\n            dispatch(errorAC(null));\r\n        }, 3000);\r\n    }\r\n};\r\n","import React, {useState} from \"react\";\r\nimport './sortArrow.styles.scss';\r\n\r\ntype PropsType = {\r\n    onSortClick: () => void\r\n}\r\n\r\nexport const SortArrowComponent = (props: PropsType) => {\r\n\r\n    const {onSortClick} = props;\r\n\r\n    const [sortArrow, setSortArrow] = useState(false);\r\n    const sortArrowToggleClass = sortArrow ? 'sortArrow toggle' : 'sortArrow';\r\n\r\n    const onSortClickHandler = () => onSortClick();\r\n\r\n    return (\r\n        <div className={sortArrowToggleClass} onClick={() => {\r\n            setSortArrow(prev => !prev);\r\n            onSortClickHandler();\r\n        }}></div>\r\n    )\r\n}","import React from \"react\";\r\nimport './tableRow.styles.scss';\r\nimport {SortArrowComponent} from \"../../../utils/sorting/sortArrow/sortArrow.component\";\r\n\r\ntype PropsType = {\r\n    id: any\r\n    firstName: string\r\n    lastName: string\r\n    email: string\r\n    phone: string\r\n    tableRowType?: string\r\n    onSortClick?: (type: string) => void\r\n    showUserDetails?: (id: number) => void\r\n}\r\n\r\nexport const TableRowComponent = (props: PropsType) => {\r\n\r\n    const {id, email, firstName, lastName, phone, tableRowType, onSortClick, showUserDetails} = props;\r\n\r\n    // if row is table header, apply class modifier\r\n    const rowTypeClass = tableRowType ? `tableRow tableRow-${tableRowType}` : 'tableRow';\r\n\r\n    // sort callback\r\n    const onSortClickHandler = (type: string) => { if (onSortClick) onSortClick(type); }\r\n\r\n    // if row is table header, add sort component with sort callback\r\n    const sortArrow= (field: string) => tableRowType && onSortClick && <SortArrowComponent onSortClick={() => onSortClickHandler(field)}/>;\r\n\r\n    // show user details callback\r\n    const onShowUser = () => {\r\n        if (showUserDetails && !onSortClick) showUserDetails(id);\r\n    }\r\n\r\n    return (\r\n        <div className={rowTypeClass} onClick={onShowUser}>\r\n            <div className={'tableColumn tableColumn-id'}>{id}{sortArrow('id')}</div>\r\n            <div className={'tableColumn tableColumn-name'}>{firstName}{sortArrow('firstName')}</div>\r\n            <div className={'tableColumn tableColumn-name'}>{lastName}{sortArrow('lastName')}</div>\r\n            <div className={'tableColumn tableColumn-email'}>{email}{sortArrow('email')}</div>\r\n            <div className={'tableColumn tableColumn-phone'}>{phone}{sortArrow('phone')}</div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport './pagination.styles.scss';\r\n\r\ntype PropsType = {\r\n    currentPage: number\r\n    totalItems: number\r\n    itemsOnPage: number\r\n    pagesInPortion: number\r\n    onPageChange: (page: number) => void\r\n}\r\n\r\nexport const PaginationComponent = (props: PropsType) => {\r\n\r\n    const {currentPage, itemsOnPage, onPageChange, pagesInPortion, totalItems} = props;\r\n\r\n    const onPageChangeHandler = (page: number) => onPageChange(page);\r\n\r\n    const totalPages = Math.ceil(totalItems / itemsOnPage);\r\n    const totalPortions = Math.ceil(totalPages / pagesInPortion);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= totalPages; i++) pages.push(i);\r\n\r\n    const [portionNumber, setPortionNumber] = useState(1);\r\n    const nextPortion = () => setPortionNumber(portionNumber + 1);\r\n    const prevPortion = () => setPortionNumber(portionNumber - 1);\r\n\r\n    const firstPageInPortion = (portionNumber - 1) * pagesInPortion + 1;\r\n    const lastPageInPortion = portionNumber * pagesInPortion;\r\n\r\n    const pagesMap = pages\r\n        .filter(f => f >= firstPageInPortion && f <= lastPageInPortion)\r\n        .map(m => {\r\n            return (\r\n                <button key={m} onClick={() => onPageChangeHandler(m)}\r\n                        className={m === currentPage ? 'active pageBtn' : 'pageBtn'}>{m}</button>\r\n            )\r\n        })\r\n\r\n    const portionWithLastPage = (page: number) => {\r\n        onPageChange(page);\r\n        setPortionNumber(totalPortions);\r\n    };\r\n\r\n    const portionWithFirstPage = (page: number) => {\r\n        onPageChange(page);\r\n        setPortionNumber(1);\r\n    };\r\n\r\n    const lastPage = pages.map(page => {\r\n        if (page === pages.length) {\r\n            return (\r\n                <div key={page} className={'paginationBlock__pre-after'}>\r\n                    <div className={'paginationDots'}>...</div>\r\n                    <button onClick={() => portionWithLastPage(page)}\r\n                            className={page === currentPage ? 'active pageBtn' : 'pageBtn'}>{page}</button>\r\n                </div>\r\n            )\r\n        }\r\n        return null;\r\n    });\r\n\r\n    const firstPage = pages.map(page => {\r\n        if (page === 1) {\r\n            return (\r\n                <div key={page} className={'paginationBlock__pre-after'}>\r\n                    <button onClick={() => portionWithFirstPage(page)}\r\n                            className={page === currentPage ? 'active pageBtn' : 'pageBtn'}>{page}</button>\r\n                    <div className={'paginationDots'}>...</div>\r\n                </div>\r\n            )\r\n        }\r\n        return null;\r\n    });\r\n\r\n    return (\r\n        <div className={'pagination'}>\r\n            <div className={'paginationBlock'}>\r\n                {portionNumber > 1 && <button onClick={prevPortion}>prev</button>}\r\n                {portionNumber > 1 && firstPage}\r\n                {pagesMap}\r\n                {portionNumber < totalPortions && lastPage}\r\n                {portionNumber < totalPortions && <button onClick={nextPortion}>next</button>}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {PropsWithChildren} from \"react\";\r\nimport './search.styles.scss';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../formFields/formFields\";\r\n\r\ntype FormType = {\r\n    text: string\r\n}\r\ntype PropsType = {\r\n    onSearch: (text: string) => void\r\n}\r\n\r\nexport const SearchComponent = (props: PropsType) => {\r\n\r\n    const {onSearch} = props;\r\n\r\n    const onSubmit = (formData: FormType) => {\r\n        const {text} = formData;\r\n        onSearch(text);\r\n    }\r\n\r\n    return (\r\n        <div className={'searchBlock'}>\r\n            <SearchReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst SearchForm: React.FC<InjectedFormProps<FormType>> = (props: PropsWithChildren<InjectedFormProps<FormType>>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={'searchForm'}>\r\n            <div className={'formGroup'}>\r\n                <Field component={Input} type={'text'} name={`text`}\r\n                       placeholder={`search for...`}/>\r\n            </div>\r\n            <div className={'formGroup'}>\r\n                <button>Search</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst SearchReduxForm = reduxForm<FormType>({\r\n    form: 'SearchForm'\r\n})(SearchForm);","export const fieldRequired = (value: string) => {\r\n    if (value) {\r\n        return undefined;\r\n    }\r\n    return \"Field is required\";\r\n};\r\n","import React, {PropsWithChildren} from \"react\";\r\nimport './addUser.styles.scss';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../utils/formFields/formFields\";\r\nimport { fieldRequired } from \"../../utils/formValidation/formValidation\";\r\n\r\nexport type AddUserFormDataType = {\r\n    firstName: string\r\n    lastName: string\r\n    email: string\r\n    phone: string\r\n}\r\ntype PropsType = ExtraPropsType & {\r\n    addUser: (payload: AddUserFormDataType) => void\r\n}\r\ntype ExtraPropsType = {\r\n    onClose: () => void\r\n}\r\n\r\nexport const AddUserComponent = (props: PropsType) => {\r\n\r\n    const {onClose, addUser} = props;\r\n\r\n    const onSubmit = (formData: AddUserFormDataType) => {\r\n        const {email, firstName, lastName, phone} = formData;\r\n        addUser({email, firstName, lastName, phone});\r\n        onClose();\r\n    }\r\n\r\n    return (\r\n        <div className={'addUserBlock'}>\r\n            <AddUserReduxForm onSubmit={onSubmit} onClose={onClose}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst AddUserForm: React.FC<InjectedFormProps<AddUserFormDataType, ExtraPropsType> & ExtraPropsType> = (props: PropsWithChildren<InjectedFormProps<AddUserFormDataType, ExtraPropsType>> & ExtraPropsType) => {\r\n\r\n    const {onClose, invalid} = props;\r\n\r\n    const onCloseClick = () => onClose();\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={'addUserForm'}>\r\n            <div className={'formGroup'}>\r\n                <Field component={Input} name={'firstName'} placeholder={'First Name'} type={'text'} validate={[fieldRequired]}/>\r\n            </div>\r\n            <div className={'formGroup'}>\r\n                <Field component={Input} name={'lastName'} placeholder={'Last Name'} type={'text'} validate={[fieldRequired]}/>\r\n            </div>\r\n            <div className={'formGroup'}>\r\n                <Field component={Input} name={'email'} placeholder={'Email'} type={'email'} validate={[fieldRequired]}/>\r\n            </div>\r\n            <div className={'formGroup'}>\r\n                <Field component={Input} name={'phone'} placeholder={'Phone'} type={'number'} validate={[fieldRequired]}/>\r\n            </div>\r\n            <div className={'formGroup'}>\r\n                <button disabled={invalid}>Add to the table</button>\r\n            </div>\r\n            <div className={'close'} onClick={onCloseClick}></div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddUserReduxForm = reduxForm<AddUserFormDataType, ExtraPropsType>({\r\n    form: 'AddUserForm'\r\n})(AddUserForm);\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport './table.styles.scss';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {\r\n    addUserAC,\r\n    changePageAC,\r\n    getDataTC,\r\n    searchAC,\r\n    sortByEmailAC,\r\n    sortByIdAC,\r\n    sortByLNameAC,\r\n    sortByNameAC,\r\n    sortByPhoneAC,\r\n    TableStateType,\r\n    userDetailsAC\r\n} from \"../../reducers/tableReducer\";\r\nimport {TableRowComponent} from \"./tableRow/tableRow.component\";\r\nimport {paginationFilter} from \"../../utils/pagination/paginationFilter/paginationFilter\";\r\nimport {PaginationComponent} from \"../../utils/pagination/pagination.component\";\r\nimport {searchFunction} from \"../../utils/search/searchFunction/searchFunction\";\r\nimport {SearchComponent} from \"../../utils/search/search.component\";\r\nimport {AddUserComponent, AddUserFormDataType} from \"../addUser/addUser.component\";\r\nimport { v1 } from \"uuid\";\r\n\r\nexport const TableComponent = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const tableState = useSelector<AppRootStateType, TableStateType>(state => state.tableReducer);\r\n    const {dataArray, totalItems, currentPage, itemsOnPage, pagesInPortion, idSort, emailSort, lastNameSort, nameSort, phoneSort, searchParam} = tableState;\r\n\r\n    // sort callback returns a field name param, then switch dispatches the action\r\n    const onSortClick = (type: string) => {\r\n        switch (type) {\r\n            case 'id':\r\n                return dispatch(sortByIdAC())\r\n            case 'firstName':\r\n                return dispatch(sortByNameAC())\r\n            case 'lastName':\r\n                return dispatch(sortByLNameAC())\r\n            case 'email':\r\n                return dispatch(sortByEmailAC())\r\n            case 'phone':\r\n                return dispatch(sortByPhoneAC())\r\n        }\r\n    }\r\n\r\n    // table header\r\n    const tableHeader = { id: 'ID', email: 'Email', firstName: 'First Name', lastName: 'Last Name', phone: 'Phone',\r\n        tableRowType: 'header', onSortClick: onSortClick };\r\n\r\n    // show user details callback\r\n    const showUserDetails = (id: number) => dispatch(userDetailsAC(id));\r\n\r\n    // table data rows\r\n    const arrItems = searchFunction(searchParam, dataArray)\r\n        .map(person => <TableRowComponent key={v1()} {...person} showUserDetails={showUserDetails}/>);\r\n\r\n    // jsx elements on current page\r\n    const [currPage, setCurrPage] = useState<JSX.Element[]>();\r\n\r\n    // pagination callback\r\n    const onPageChange = (page: number) => dispatch(changePageAC(page));\r\n\r\n    // restrict fetching data from server to only initial loading\r\n    const [first, setFirst] = useState(true);\r\n\r\n    // search callback\r\n    const onSearch = (text: string) => dispatch(searchAC(text));\r\n\r\n    // show/hide add user form\r\n    const [addUserPopUp, setAddUserPopUp] = useState(false);\r\n\r\n    // open add user pop up callback\r\n    const onOpen = () => setAddUserPopUp(true);\r\n\r\n    // close add user pop up callback\r\n    const onClose = () => setAddUserPopUp(false);\r\n\r\n    // add user callback\r\n    const addUser = (payload: AddUserFormDataType) => dispatch(addUserAC(payload));\r\n\r\n    // get 32 or 1000 users (by default we load 20 users)\r\n    const getUsers = (usersNumber: number) => {\r\n        dispatch(getDataTC(usersNumber));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (first) {\r\n            dispatch(getDataTC(100));\r\n            setFirst(false)\r\n        }\r\n\r\n        // divide users array by chunks, set the amount of users on page according to the current page and the amount users on one page\r\n        setCurrPage(paginationFilter(currentPage, itemsOnPage, arrItems));\r\n\r\n    }, [dispatch, totalItems, idSort, emailSort, lastNameSort, nameSort, phoneSort, currentPage, searchParam, dataArray]);\r\n\r\n    return (\r\n        <>\r\n            <div className={'tableInterface'}>\r\n                <SearchComponent onSearch={onSearch}/>\r\n                <div className={'tableInterface__btnsContainer'}>\r\n                    <button onClick={onOpen}>Add user</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={'dataTable'}>\r\n                <TableRowComponent {...tableHeader}/>\r\n                {currPage}\r\n            </div>\r\n\r\n            <div className={'tableInterface'}>\r\n                <PaginationComponent totalItems={totalItems} pagesInPortion={pagesInPortion} itemsOnPage={itemsOnPage}\r\n                                     currentPage={currentPage} onPageChange={onPageChange}/>\r\n                <div className={'tableInterface__btnsContainer'}>\r\n                    <button onClick={() => getUsers(32)}>Load 32 users</button>\r\n                    <button onClick={() => getUsers(1000)}>Load 1000 users</button>\r\n                </div>\r\n            </div>\r\n\r\n            {\r\n                addUserPopUp &&\r\n                <AddUserComponent onClose={onClose} addUser={addUser}/>\r\n            }\r\n        </>\r\n    )\r\n}","import {ServerResponseObjectType} from \"../../../api/appApi\";\r\n\r\nexport const searchFunction = (text: string, arrItems: Array<ServerResponseObjectType>) => {\r\n    if (!text) {\r\n        return arrItems\r\n    }\r\n    return arrItems.filter(item => {\r\n        if (\r\n            item.firstName.toLowerCase().indexOf(text.toLocaleLowerCase()) > -1 ||\r\n            item.lastName.toLowerCase().indexOf(text.toLocaleLowerCase()) > -1 ||\r\n            item.email.toLowerCase().indexOf(text.toLocaleLowerCase()) > -1 ||\r\n            item.phone.toLowerCase().indexOf(text.toLocaleLowerCase()) > -1\r\n        ) {\r\n            return item\r\n        }\r\n        return undefined;\r\n    })\r\n}","export const paginationFilter = (pageNumber: number, elsOnPage: number, dataArr: Array<JSX.Element>) => {\r\n    const maxEl = pageNumber * elsOnPage;\r\n    const minEl = (pageNumber - 1) * elsOnPage + 1\r\n    return dataArr.filter((page, idx) => {\r\n        if (idx + 1 >= minEl && idx + 1 <= maxEl) {\r\n            return page;\r\n        }\r\n        return undefined;\r\n    });\r\n};","import React from \"react\";\r\nimport './userDetails.styles.scss';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {TableStateType} from \"../../reducers/tableReducer\";\r\n\r\nexport const UserDetailsComponent = () => {\r\n\r\n    const tableState = useSelector<AppRootStateType, TableStateType>(state => state.tableReducer);\r\n    const {userDetailsId, dataArray} = tableState;\r\n\r\n    const userDetails = dataArray.filter(f => f.id === userDetailsId)\r\n        .map(m => {\r\n            return (\r\n                <div className={'userDetails'} key={m.id}>\r\n                    <div className={'userDetails__line'}>\r\n                        <div className={'userDetails__title'}>Выбран пользователь:</div>\r\n                        <div className={'userDetails__text'}>{m.firstName} {m.lastName}</div>\r\n                    </div>\r\n                    <div className={'userDetails__line'}>\r\n                        <div className={'userDetails__title'}>Описание:</div>\r\n                    </div>\r\n                    <div className={'userDetails__line'}>\r\n                        <div className={'userDetails__text'}>{m.description}</div>\r\n                    </div>\r\n                    <div className={'userDetails__line'}>\r\n                        <div className={'userDetails__title'}>Адрес проживания: </div>\r\n                        <div className={'userDetails__text'}>{m.address.streetAddress}</div>\r\n                    </div>\r\n                    <div className={'userDetails__line'}>\r\n                        <div className={'userDetails__title'}>Город:</div>\r\n                        <div className={'userDetails__text'}>{m.address.city}</div>\r\n                    </div>\r\n                    <div className={'userDetails__line'}>\r\n                        <div className={'userDetails__title'}>Провинция:</div>\r\n                        <div className={'userDetails__text'}>{m.address.state}</div>\r\n                    </div>\r\n                    <div className={'userDetails__line'}>\r\n                        <div className={'userDetails__title'}>Индекс</div>\r\n                        <div className={'userDetails__text'}>{m.address.zip}</div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    return (\r\n        <>\r\n            {\r\n                userDetailsId &&\r\n                userDetails\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport './loadingFromServer.styles.scss';\r\nimport {LinearProgress, createMuiTheme, ThemeProvider} from \"@material-ui/core\";\r\n\r\nexport const LoadingFromServerComponent = () => {\r\n\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            secondary: {\r\n                main: '#fa9716',\r\n            },\r\n        },\r\n    });\r\n\r\n    return (\r\n        <div className={'loadingBar'}>\r\n            <ThemeProvider theme={theme}>\r\n                <LinearProgress color=\"secondary\"/>\r\n            </ThemeProvider>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './error.styles.scss';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {TableStateType} from \"../../reducers/tableReducer\";\r\n\r\nexport const ErrorComponent = () => {\r\n\r\n    const tableState = useSelector<AppRootStateType, TableStateType>(state => state.tableReducer);\r\n    const {error} = tableState;\r\n\r\n    return (\r\n        <div className={'errorMessage'}>\r\n            {error}\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.styles.scss';\nimport {TableComponent} from \"../components/table/table.component\";\nimport {UserDetailsComponent} from \"../components/userDetails/userDetails.component\";\nimport {LoadingFromServerComponent} from \"../utils/loading/loadDataFromServer/loadingFromServer.component\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../store/store\";\nimport {TableStateType} from \"../reducers/tableReducer\";\nimport { ErrorComponent } from '../utils/error/error.component';\n\nexport const App = () => {\n\n    const tableState = useSelector<AppRootStateType, TableStateType>(state => state.tableReducer);\n    const {loadingData, error} = tableState;\n\n    return (\n        <div className=\"App\">\n\n            <div className={'container'}>\n                <div className={'tableBlock'}>\n                    <TableComponent/>\n                </div>\n                <div className={'userBlock'}>\n                    <UserDetailsComponent/>\n                </div>\n            </div>\n\n            {loadingData && <LoadingFromServerComponent/>}\n            {error && <ErrorComponent/>}\n\n        </div>\n    );\n}\n","import {applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport ThunkMiddleware from 'redux-thunk';\r\nimport {reducer as ReduxForm} from 'redux-form'\r\nimport {tableReducer} from \"../reducers/tableReducer\";\r\n\r\nconst reducers = combineReducers({\r\n    form: ReduxForm,\r\n    tableReducer,\r\n});\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>;\r\n\r\nexport const store = createStore(reducers, applyMiddleware(ThunkMiddleware));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './app/App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>\n    ,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}